"use strict";

var _formatting = _interopRequireDefault(require("./formatting"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mapText = "Testing out map, using reduce";
console.log(mapText);
var testArray = [1, 2, 3, 4, 5];
var multiplier = 2;
console.log("Let's multiply", testArray, "by", multiplier);
var mapArray = testArray.map(function (num) {
  return num * multiplier;
});
console.log(mapArray, "This is using map.");
var reduceMapArray = testArray.reduce(function (sum, cur) {
  sum.push(cur * multiplier);
  return sum;
}, []);
console.log(reduceMapArray, "This is using reduce!");

if (reduceMapArray.values == mapArray.values) {
  console.log("Yay, they should match.");
  console.log(_formatting.default);
}

console.log("Let's play with some consts!");
var array = [];
console.log(array, "First, let's instantiate an empty const array of numbers `array`");
array.push(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
console.log(array, "Then let's push a whole bunch of numbers into it.");
console.log(array.pop(), "Then let's pop the last element `10` off of the end");
console.log(array.reverse(), "Then let's flip it aroung & reverse it");
console.log(array, "Did it change the original state of the `array` const, isn't that surprising?");
array.reverse();
console.log(array, "Finally, reverse it back & reprint it.");
var concatTopic = [10, 11, 12, 13, 14];
console.log(concatTopic, "Let's build a second array & concatenate the two. ");
var newArray = array.concat(concatTopic);
console.log(array, "See the old array is unchanged.");
console.log(newArray, "While the new one has been built via concatenation.");
console.log(_formatting.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZWR1Y2UtbWFwLnRzIl0sIm5hbWVzIjpbIm1hcFRleHQiLCJjb25zb2xlIiwibG9nIiwidGVzdEFycmF5IiwibXVsdGlwbGllciIsIm1hcEFycmF5IiwibWFwIiwibnVtIiwicmVkdWNlTWFwQXJyYXkiLCJyZWR1Y2UiLCJzdW0iLCJjdXIiLCJwdXNoIiwidmFsdWVzIiwiYWZ0ZXJGdW5jdGlvbkJyZWFrIiwiYXJyYXkiLCJwb3AiLCJyZXZlcnNlIiwiY29uY2F0VG9waWMiLCJuZXdBcnJheSIsImNvbmNhdCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7OztBQUNBLElBQU1BLE9BQU8sR0FBRywrQkFBaEI7QUFFQUMsT0FBTyxDQUFDQyxHQUFSLENBQVlGLE9BQVo7QUFFQSxJQUFNRyxTQUFTLEdBQUcsQ0FBQyxDQUFELEVBQUcsQ0FBSCxFQUFLLENBQUwsRUFBTyxDQUFQLEVBQVMsQ0FBVCxDQUFsQjtBQUNBLElBQU1DLFVBQVUsR0FBRyxDQUFuQjtBQUVBSCxPQUFPLENBQUNDLEdBQVIsQ0FBWSxnQkFBWixFQUE4QkMsU0FBOUIsRUFBMkMsSUFBM0MsRUFBa0RDLFVBQWxEO0FBRUEsSUFBTUMsUUFBUSxHQUFHRixTQUFTLENBQUNHLEdBQVYsQ0FBYyxVQUFDQyxHQUFELEVBQWdCO0FBQzNDLFNBQU9BLEdBQUcsR0FBR0gsVUFBYjtBQUNILENBRmdCLENBQWpCO0FBSUFILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRyxRQUFaLEVBQXNCLG9CQUF0QjtBQUVBLElBQU1HLGNBQWMsR0FBR0wsU0FBUyxDQUFDTSxNQUFWLENBQWlCLFVBQUNDLEdBQUQsRUFBZ0JDLEdBQWhCLEVBQWdDO0FBQ3JFRCxFQUFBQSxHQUFHLENBQUNFLElBQUosQ0FBU0QsR0FBRyxHQUFHUCxVQUFmO0FBQ0EsU0FBT00sR0FBUDtBQUNGLENBSHNCLEVBR3BCLEVBSG9CLENBQXZCO0FBS0FULE9BQU8sQ0FBQ0MsR0FBUixDQUFZTSxjQUFaLEVBQTRCLHVCQUE1Qjs7QUFFQSxJQUFJQSxjQUFjLENBQUNLLE1BQWYsSUFBeUJSLFFBQVEsQ0FBQ1EsTUFBdEMsRUFBNkM7QUFDekNaLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHlCQUFaO0FBQ0FELEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZWSxtQkFBWjtBQUNIOztBQUVEYixPQUFPLENBQUNDLEdBQVIsQ0FBWSw4QkFBWjtBQUVBLElBQU1hLEtBQWMsR0FBRyxFQUF2QjtBQUNBZCxPQUFPLENBQUNDLEdBQVIsQ0FBWWEsS0FBWixFQUFtQixrRUFBbkI7QUFFQUEsS0FBSyxDQUFDSCxJQUFOLENBQVcsQ0FBWCxFQUFjLENBQWQsRUFBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsRUFBMEIsQ0FBMUIsRUFBNkIsQ0FBN0IsRUFBZ0MsQ0FBaEMsRUFBbUMsQ0FBbkMsRUFBc0MsRUFBdEM7QUFDQVgsT0FBTyxDQUFDQyxHQUFSLENBQVlhLEtBQVosRUFBbUIsbURBQW5CO0FBRUFkLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYSxLQUFLLENBQUNDLEdBQU4sRUFBWixFQUF5QixxREFBekI7QUFDQWYsT0FBTyxDQUFDQyxHQUFSLENBQVlhLEtBQUssQ0FBQ0UsT0FBTixFQUFaLEVBQTZCLHdDQUE3QjtBQUNBaEIsT0FBTyxDQUFDQyxHQUFSLENBQVlhLEtBQVosRUFBbUIsK0VBQW5CO0FBQ0FBLEtBQUssQ0FBQ0UsT0FBTjtBQUNBaEIsT0FBTyxDQUFDQyxHQUFSLENBQVlhLEtBQVosRUFBbUIsd0NBQW5CO0FBRUEsSUFBTUcsV0FBVyxHQUFHLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxFQUFULEVBQWEsRUFBYixFQUFpQixFQUFqQixDQUFwQjtBQUNBakIsT0FBTyxDQUFDQyxHQUFSLENBQVlnQixXQUFaLEVBQXlCLG9EQUF6QjtBQUNBLElBQU1DLFFBQVEsR0FBR0osS0FBSyxDQUFDSyxNQUFOLENBQWFGLFdBQWIsQ0FBakI7QUFFQWpCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZYSxLQUFaLEVBQW1CLGlDQUFuQjtBQUNBZCxPQUFPLENBQUNDLEdBQVIsQ0FBWWlCLFFBQVosRUFBc0IscURBQXRCO0FBQ0FsQixPQUFPLENBQUNDLEdBQVIsQ0FBWVksbUJBQVoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYWZ0ZXJGdW5jdGlvbkJyZWFrIGZyb20gXCIuL2Zvcm1hdHRpbmdcIjtcbmNvbnN0IG1hcFRleHQgPSBcIlRlc3Rpbmcgb3V0IG1hcCwgdXNpbmcgcmVkdWNlXCI7XG5cbmNvbnNvbGUubG9nKG1hcFRleHQpO1xuXG5jb25zdCB0ZXN0QXJyYXkgPSBbMSwyLDMsNCw1XTtcbmNvbnN0IG11bHRpcGxpZXIgPSAyO1xuXG5jb25zb2xlLmxvZyhcIkxldCdzIG11bHRpcGx5XCIsIHRlc3RBcnJheSAgLCBcImJ5XCIgLCBtdWx0aXBsaWVyKVxuXG5jb25zdCBtYXBBcnJheSA9IHRlc3RBcnJheS5tYXAoKG51bTpudW1iZXIpID0+IHtcbiAgICByZXR1cm4gbnVtICogbXVsdGlwbGllcjtcbn0pO1xuXG5jb25zb2xlLmxvZyhtYXBBcnJheSwgXCJUaGlzIGlzIHVzaW5nIG1hcC5cIik7XG5cbmNvbnN0IHJlZHVjZU1hcEFycmF5ID0gdGVzdEFycmF5LnJlZHVjZSgoc3VtOiBudW1iZXJbXSwgY3VyOiBudW1iZXIpID0+IHtcbiAgIHN1bS5wdXNoKGN1ciAqIG11bHRpcGxpZXIpO1xuICAgcmV0dXJuIHN1bTtcbn0sIFtdKTtcblxuY29uc29sZS5sb2cocmVkdWNlTWFwQXJyYXksIFwiVGhpcyBpcyB1c2luZyByZWR1Y2UhXCIpO1xuXG5pZiAocmVkdWNlTWFwQXJyYXkudmFsdWVzID09IG1hcEFycmF5LnZhbHVlcyl7XG4gICAgY29uc29sZS5sb2coXCJZYXksIHRoZXkgc2hvdWxkIG1hdGNoLlwiKVxuICAgIGNvbnNvbGUubG9nKGFmdGVyRnVuY3Rpb25CcmVhaylcbn1cblxuY29uc29sZS5sb2coXCJMZXQncyBwbGF5IHdpdGggc29tZSBjb25zdHMhXCIpXG5cbmNvbnN0IGFycmF5Om51bWJlcltdID0gW11cbmNvbnNvbGUubG9nKGFycmF5LCBcIkZpcnN0LCBsZXQncyBpbnN0YW50aWF0ZSBhbiBlbXB0eSBjb25zdCBhcnJheSBvZiBudW1iZXJzIGBhcnJheWBcIilcblxuYXJyYXkucHVzaCgxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMClcbmNvbnNvbGUubG9nKGFycmF5LCBcIlRoZW4gbGV0J3MgcHVzaCBhIHdob2xlIGJ1bmNoIG9mIG51bWJlcnMgaW50byBpdC5cIilcblxuY29uc29sZS5sb2coYXJyYXkucG9wKCksIFwiVGhlbiBsZXQncyBwb3AgdGhlIGxhc3QgZWxlbWVudCBgMTBgIG9mZiBvZiB0aGUgZW5kXCIpXG5jb25zb2xlLmxvZyhhcnJheS5yZXZlcnNlKCksIFwiVGhlbiBsZXQncyBmbGlwIGl0IGFyb3VuZyAmIHJldmVyc2UgaXRcIilcbmNvbnNvbGUubG9nKGFycmF5LCBcIkRpZCBpdCBjaGFuZ2UgdGhlIG9yaWdpbmFsIHN0YXRlIG9mIHRoZSBgYXJyYXlgIGNvbnN0LCBpc24ndCB0aGF0IHN1cnByaXNpbmc/XCIpXG5hcnJheS5yZXZlcnNlKClcbmNvbnNvbGUubG9nKGFycmF5LCBcIkZpbmFsbHksIHJldmVyc2UgaXQgYmFjayAmIHJlcHJpbnQgaXQuXCIpXG5cbmNvbnN0IGNvbmNhdFRvcGljID0gWzEwLCAxMSwgMTIsIDEzLCAxNF1cbmNvbnNvbGUubG9nKGNvbmNhdFRvcGljLCBcIkxldCdzIGJ1aWxkIGEgc2Vjb25kIGFycmF5ICYgY29uY2F0ZW5hdGUgdGhlIHR3by4gXCIpXG5jb25zdCBuZXdBcnJheSA9IGFycmF5LmNvbmNhdChjb25jYXRUb3BpYylcblxuY29uc29sZS5sb2coYXJyYXksIFwiU2VlIHRoZSBvbGQgYXJyYXkgaXMgdW5jaGFuZ2VkLlwiKVxuY29uc29sZS5sb2cobmV3QXJyYXksIFwiV2hpbGUgdGhlIG5ldyBvbmUgaGFzIGJlZW4gYnVpbHQgdmlhIGNvbmNhdGVuYXRpb24uXCIpXG5jb25zb2xlLmxvZyhhZnRlckZ1bmN0aW9uQnJlYWspIl19