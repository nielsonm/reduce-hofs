"use strict";

// Const array play.
console.log("Playing with an array const!");
var array = [];
console.log(array, "First, instantiate an empty const array of numbers `array`");
array.push(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
console.log(array, "Then push a whole bunch of numbers into it.");
console.log(array.pop(), "Then pop the last element `10` off of the end");
console.log(array.reverse(), "Then flip it around & reverse it");
console.log(array, "Did it change the original state of the `array` const, that is surprising..?");
array.reverse();
console.log(array, "Finally, reverse it back & reprint it.");
var concatTopic = [10, 11, 12, 13, 14];
console.log(concatTopic, "Build a second array & concatenate the two. ");
var newArray = array.concat(concatTopic);
console.log(array, "See the old array is unchanged.");
console.log(newArray, "While the new one has been built via concatenation.");
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9jb25zdC1hcnJheS50cyJdLCJuYW1lcyI6WyJjb25zb2xlIiwibG9nIiwiYXJyYXkiLCJwdXNoIiwicG9wIiwicmV2ZXJzZSIsImNvbmNhdFRvcGljIiwibmV3QXJyYXkiLCJjb25jYXQiXSwibWFwcGluZ3MiOiI7O0FBRUE7QUFDQUEsT0FBTyxDQUFDQyxHQUFSLENBQVksOEJBQVo7QUFFQSxJQUFNQyxLQUFjLEdBQUcsRUFBdkI7QUFDQUYsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQVosRUFBbUIsNERBQW5CO0FBRUFBLEtBQUssQ0FBQ0MsSUFBTixDQUFXLENBQVgsRUFBYyxDQUFkLEVBQWlCLENBQWpCLEVBQW9CLENBQXBCLEVBQXVCLENBQXZCLEVBQTBCLENBQTFCLEVBQTZCLENBQTdCLEVBQWdDLENBQWhDLEVBQW1DLENBQW5DLEVBQXNDLEVBQXRDO0FBQ0FILE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUFaLEVBQW1CLDZDQUFuQjtBQUVBRixPQUFPLENBQUNDLEdBQVIsQ0FBWUMsS0FBSyxDQUFDRSxHQUFOLEVBQVosRUFBeUIsK0NBQXpCO0FBQ0FKLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxLQUFLLENBQUNHLE9BQU4sRUFBWixFQUE2QixrQ0FBN0I7QUFDQUwsT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQVosRUFBbUIsOEVBQW5CO0FBQ0FBLEtBQUssQ0FBQ0csT0FBTjtBQUNBTCxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsS0FBWixFQUFtQix3Q0FBbkI7QUFFQSxJQUFNSSxXQUFXLEdBQUcsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLEVBQVQsRUFBYSxFQUFiLEVBQWlCLEVBQWpCLENBQXBCO0FBQ0FOLE9BQU8sQ0FBQ0MsR0FBUixDQUFZSyxXQUFaLEVBQXlCLDhDQUF6QjtBQUNBLElBQU1DLFFBQVEsR0FBR0wsS0FBSyxDQUFDTSxNQUFOLENBQWFGLFdBQWIsQ0FBakI7QUFFQU4sT0FBTyxDQUFDQyxHQUFSLENBQVlDLEtBQVosRUFBbUIsaUNBQW5CO0FBQ0FGLE9BQU8sQ0FBQ0MsR0FBUixDQUFZTSxRQUFaLEVBQXNCLHFEQUF0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhZnRlckZ1bmN0aW9uQnJlYWsgZnJvbSBcIi4vZm9ybWF0dGluZ1wiO1xuXG4vLyBDb25zdCBhcnJheSBwbGF5LlxuY29uc29sZS5sb2coXCJQbGF5aW5nIHdpdGggYW4gYXJyYXkgY29uc3QhXCIpXG5cbmNvbnN0IGFycmF5Om51bWJlcltdID0gW11cbmNvbnNvbGUubG9nKGFycmF5LCBcIkZpcnN0LCBpbnN0YW50aWF0ZSBhbiBlbXB0eSBjb25zdCBhcnJheSBvZiBudW1iZXJzIGBhcnJheWBcIilcblxuYXJyYXkucHVzaCgxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMClcbmNvbnNvbGUubG9nKGFycmF5LCBcIlRoZW4gcHVzaCBhIHdob2xlIGJ1bmNoIG9mIG51bWJlcnMgaW50byBpdC5cIilcblxuY29uc29sZS5sb2coYXJyYXkucG9wKCksIFwiVGhlbiBwb3AgdGhlIGxhc3QgZWxlbWVudCBgMTBgIG9mZiBvZiB0aGUgZW5kXCIpXG5jb25zb2xlLmxvZyhhcnJheS5yZXZlcnNlKCksIFwiVGhlbiBmbGlwIGl0IGFyb3VuZCAmIHJldmVyc2UgaXRcIilcbmNvbnNvbGUubG9nKGFycmF5LCBcIkRpZCBpdCBjaGFuZ2UgdGhlIG9yaWdpbmFsIHN0YXRlIG9mIHRoZSBgYXJyYXlgIGNvbnN0LCB0aGF0IGlzIHN1cnByaXNpbmcuLj9cIilcbmFycmF5LnJldmVyc2UoKVxuY29uc29sZS5sb2coYXJyYXksIFwiRmluYWxseSwgcmV2ZXJzZSBpdCBiYWNrICYgcmVwcmludCBpdC5cIilcblxuY29uc3QgY29uY2F0VG9waWMgPSBbMTAsIDExLCAxMiwgMTMsIDE0XVxuY29uc29sZS5sb2coY29uY2F0VG9waWMsIFwiQnVpbGQgYSBzZWNvbmQgYXJyYXkgJiBjb25jYXRlbmF0ZSB0aGUgdHdvLiBcIilcbmNvbnN0IG5ld0FycmF5ID0gYXJyYXkuY29uY2F0KGNvbmNhdFRvcGljKVxuXG5jb25zb2xlLmxvZyhhcnJheSwgXCJTZWUgdGhlIG9sZCBhcnJheSBpcyB1bmNoYW5nZWQuXCIpXG5jb25zb2xlLmxvZyhuZXdBcnJheSwgXCJXaGlsZSB0aGUgbmV3IG9uZSBoYXMgYmVlbiBidWlsdCB2aWEgY29uY2F0ZW5hdGlvbi5cIilcbiJdfQ==